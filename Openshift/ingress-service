Openshift Exposing the service by creating a route  vs  Kubernet expose service using Ingress service

$ oc new-project myproject
Use the oc new-app command to create your service:

$ oc new-app nodejs:12~https://github.com/sclorg/nodejs-ex.git
To verify that the service was created, run the following command:

$ oc get svc -n myproject
Example output

NAME        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE
nodejs-ex   ClusterIP   172.30.197.157   <none>        8080/TCP   70s

$ oc project myproject
Run the oc expose service command to expose the route:
$ oc expose service nodejs-ex
Example output
route.route.openshift.io/nodejs-ex exposed
To verify that the service is exposed, you can use a tool, such as cURL, to make sure the service is accessible from outside the cluster.

Use the oc get route command to find the routeâ€™s host name:

$ oc get route
Example output

NAME        HOST/PORT                        PATH   SERVICES    PORT       TERMINATION   WILDCARD
nodejs-ex   nodejs-ex-myproject.example.com         nodejs-ex   8080-tcp                 None
Use cURL to check that the host responds to a GET request:
$ curl --head nodejs-ex-myproject.example.com
Example output

HTTP/1.1 200 OK

Creating a load balancer service

$ oc project project1
Open a text file on the control plane node (also known as the master node) and paste the following text, editing the file as needed:

Sample load balancer configuration file

apiVersion: v1
kind: Service
metadata:
  name: egress-2 
spec:
  ports:
  - name: db
    port: 3306 
  loadBalancerIP:
  loadBalancerSourceRanges: 
  - 10.0.0.0/8
  - 192.168.0.0/16
  type: LoadBalancer 
  selector:
    name: mysql 
Enter a descriptive name for the load balancer service.
Enter the same port that the service you want to expose is listening on.
Enter a list of specific IP addresses to restrict traffic through the load balancer. This field is ignored if the cloud-provider does not support the feature.
Enter Loadbalancer as the type.
Enter the name of the service.
To restrict traffic through the load balancer to specific IP addresses, it is recommended to use the service.beta.kubernetes.io/load-balancer-source-ranges annotation rather than setting the loadBalancerSourceRanges field. With the annotation, you can more easily migrate to the OpenShift API, which will be implemented in a future release.

Save and exit the file.

Run the following command to create the service:
$ oc create -f <file-name>
For example:
$ oc create -f mysql-lb.yaml
Execute the following command to view the new service:

$ oc get svc
Example output

NAME       TYPE           CLUSTER-IP      EXTERNAL-IP                             PORT(S)          AGE
egress-2   LoadBalancer   172.30.22.226   ad42f5d8b303045-487804948.example.com   3306:3035




###############

For example, if an HAProxy Router is used, external traffic is expected to go to the particular node hosting the HAProxy, then being routed to the service/pod.

According to the dev guide, there are 3 ways to create a Route.

1)The Openshift web console UI
2) oc CLI, such as oc expose svc/frontend --hostname=www.example.com
3) YAML manifest, such as
apiVersion: v1
kind: Route
metadata:
  name: frontend
spec:
  host: www.example.com
  path: "/test" 
  to:
    kind: Service
    name: frontend
Like Ingress, Route also supports annotations, for example router.openshift.io/cookie_name="my_cookie". But note that the annotations have different prefixes than those of Ingress resources, thus their annotations are not interchangeable.

However, the main method to control the behavior of a Route, rather than through annotations, is by changing the Router Environment Variables.

Ingress to Route
Starting from Openshift 3.10, Ingress objects created in Openshift can be translated into Route objects.

If you know the difference between Ingress and routes well, this is very convenient.

On the other hand, however, it can easily mislead people trying to take advantage of this translation.

As described in the section above, Routes:

Doesn't respect Ingress annotations. As a result, your fine-tuned annotations on your Ingress manifest file would NOT affect the true behavior of the created Route.
Needs traffic to first reach the node. So you will need to configure DNS records to Router nodes separately.
